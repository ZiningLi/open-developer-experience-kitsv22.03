# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2019-2020 Intel Corporation

---

- name: check if multus release already exists
  command: helm status multus-release
  failed_when: false
  register: get_release_multus
  changed_when: false

- name: install Multus-cni chart
  block:
  - name: login harbor registry firstly
    #command: docker login "{{ _registry_ip_address }}:{{ _registry_port }}" -uadmin -p{{ harbor_admin_password }}
    command: docker login "{{ _registry_ip_address }}:{{ _registry_port }}" -uadmin -pvha1bFmwYChE27sGgMxd
    retries: 60
    delay: 15
    failed_when: false

  - name: pull multus image
    docker_image:
      name: "{{ _multus_image_name }}"
      tag: "{{ _multus_image_tag }}"
      source: pull
    when: not (offline_enable | default(false))

  - name: Check if the image already exists
    shell: >
      docker images | grep "{{ _multus_image_name }}" | grep "{{ _multus_image_tag }}"
    register: result
    failed_when: result.rc != 0
    when: offline_enable | default(false)

  - name: tag multus image and push to Harbor registry
    docker_image:
      name: "{{ _multus_image_name }}"
      repository: "{{ _registry_ip_address }}:{{ _registry_port }}/intel/multus"
      tag: "{{ _multus_image_tag }}"
      push: true
      source: local
    register: result
    retries: "{{ harbor_timeout_min }}"
    until: result is succeeded
    delay: 60

  - name: remove local image
    docker_image:
      state: absent
      name: "{{ _multus_image_name }}"
      tag: "{{ _multus_image_tag }}"
    when: not (offline_enable | default(false))

  - name: copy multus-cni chart
    copy:
      src: "multus-cni"
      dest: "{{ ne_helm_charts_default_dir }}"
      mode: 0755

  - name: install multus-cni chart
    command: >
      helm install multus-release "{{ ne_helm_charts_default_dir }}/multus-cni"
      --set registry_ip="{{ _registry_ip_address }}" --set registry_port="{{ _registry_port }}" --set image_tag="{{ _multus_image_tag }}"
    changed_when: true

  - name: wait for Multus to start
    shell: >
      set -o pipefail &&
      kubectl get pods --field-selector status.phase=Running -n kube-system | grep -q kube-multus-ds-amd64
    register: multus_started
    retries: 30
    delay: 10
    until: multus_started.rc == 0
    changed_when: false
  when: get_release_multus.rc != 0
